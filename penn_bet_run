#!usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Sat May 30 01:05:59 2020

@author: siddhesh
"""

from __future__ import absolute_import, print_function, division
import argparse
import os
from Penn_BET.trainer import trainer_main
from Penn_BET.tester import test_ma, test_multi_4
import pkg_resources


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='Deep-BET', formatter_class=argparse.RawTextHelpFormatter,
                                     description='\nThis code was implemented for Deep Learning '+\
    'based training and inference of 3D-U-Net,\n3D-Res-U-Net models for '+\
    'Brain Extraction a.k.a Skull Stripping in biomedical NIFTI volumes.\n'+\
    'The project is hosted at: https://github.com/Geeks-Sid/Penn-BET * \n'+\
    'See the documentation for details on its use.\n'+\
    'If you are using this tool, please cite out paper.'
    'This software accompanies the research presented in:\n'+\
    'Thakur et al, \'Brain Extraction on MRI Scans in Presence of Diffuse\n'+\
    'Glioma:Multi-institutional Performance Evaluation of Deep Learning Methods'+\
    'and Robust Modality-Agnostic Training\'.\n'+\
    'We hope our work helps you in your endeavours.\n'+\
    'For questions and feedback contact: software@cbica.upenn.edu')

    parser.add_argument('-params', dest='params', type=str,
                        help='Specify the architecture of the model to be used, by providing a\n'+\
                             'config file [PARAMS_CFG]. A sample of the files is stored in\n'+\
                             'Penn_BET/config folder for the train, test. Checkout the parameter\n'+\
                             'explanation in the Readme.md for more details.\n',
                        required=True)

    parser.add_argument('-train', dest='train', type=str,
                        help='Should be set to "True" (without the quotes) if you are trying to\n'+\
                             'run training, temporarily we not planning to support in this\n'+\
                             'release stay tuned for the next release.\n')

    parser.add_argument('-test', dest='test', type=str,
                        help='Should be set to "True" (without the quotes) if you are trying\n'+\
                             'to run inference, do not set the training to true as testing\n'+\
                             'will be overridden.\n')

    parser.add_argument('-dev', default='0', dest='device', type=str,
                        help='used to set on which device the prediction will run.\n'+
                             'Must be either int or str. Use int for GPU id or\n'+
                             '\'cpu\' to run on CPU. Avoid training on CPU. \n'+
                             'Default for selecting first GPU is set to -dev 0\n',
                        required=False)

    parser.add_argument('-save_brain', default=1, type=int, required=False, dest='save_brain',
                        help='if set to 0 the segmentation mask will be only produced and\n'+\
                             'and the mask will not be applied on the input image to produce\n'+\
                             ' a brain. This step is to be only applied if you trust this\n'+\
                             'software and do not feel the need for Manual QC. This will save\n'+\
                             ' you some time. This is useless for training though.')

    parser.add_argument('-load', default=None, dest='load', type=str,
                        help='If the location of the weight file is passed, the internal methods\n'+\
                             'are overridden to apply these weights to the model. We warn against\n'+\
                             'the usage of this unless you know what you are passing. C')
    
    parser.add_argument('-v', '--version', action='version',
                        version=pkg_resources.require("Deep-BET")[0].version, help="Show program's version number and exit.")
                        
    args = parser.parse_args()

    params_file = os.path.abspath(args.params)
    DEVICE = args.device
    # Reading in all the parameters
    if os.path.isfile(params_file):
        params_df = pd.read_csv(cfg, sep=' = ', names=['param_name', 'param_value'],
                                comment='#', skip_blank_lines=True,
                                engine='python').fillna(' ')
    else:
        print('Missing train_params.cfg file?')
        sys.exit(0)
    params = {}
    for i in range(params_df.shape[0]):
        params[params_df.iloc[i, 0]] = params_df.iloc[i, 1]
    mode = params['mode']
    save_brain = args.save_brain
    if args.load is not None:
        weights = os.path.abspath(args.load)
    else:
        weights = None

    if weights is not None:
        if os.path.exists(weights):
            if args.train == 'True':
                _, ext = os.path.splitext(weights)
                if ext != '.ckpt':
                    raise ValueError("The extension was not a .ckpt file for training to enable proper\n"+\
                                     "resume during training. Please pass a .ckpt file.")
            elif args.test == 'True':
                if args.mode == 'MA' or args.mode == 'Multi_4':
                    _, ext = os.path.splitext(weights)
                    if ext != '.pt':
                        raise ValueError("Expected a .pt file, got a file with %s extension. If it is a\n"+\
                                         ".ckpt file, please conver it with our converion script\n"+\
                                         "mentioned in the Readme.md")
            else :
                raise ValueError('Unknown value for mode. Expected one of "MA" or "Multi-4" without the quotes.',
                                 'We received : ', args.mode,
                                 'Common mistakes include spelling mistakes, check it to make sure.')
    else:
        if args.train == 'True':
            pass
        elif args.test == 'True':
            base_dir = os.path.dirname(os.path.realpath(__file__))
            if args.mode == 'MA':
                weights = os.path.join(base_dir, 'Penn_BET/weights/resunet_ma.pt')
            elif args.mode == 'Multi-4':
                weights = os.path.join(base_dir, 'Penn_BET/weights/resunet_multi_4.pt')
        else:
            raise ValueError('Unknown value for mode. Expected one of "MA" or "Multi-4" without the quotes.',
                             'We received : ', args.mode,
                             'Common mistakes include spelling mistakes, check it to make sure.')
    print("Weight file used :", weights)

    if DEVICE == 'cpu':
        pass
    else:
        DEVICE = int(DEVICE)

    if args.save_brain == 0:
        args.save_brain = False
    elif args.save_brain == 1:
        args.save_brain = True
    else:
        raise ValueError('Unknown value for save brain:')
        
    if args.train == 'True':
        trainer_main.train_network(params_file, DEVICE, weights)
    elif args.test == 'True':
        if args.mode == 'MA':
            test_ma.infer_ma(params_file, DEVICE, args.save_brain, weights)
        elif args.mode == 'Multi-4':
            test_multi_4.infer_multi_4(params_file, DEVICE, args.save_brain, weights)
        else :
            raise ValueError('Unknown value for mode. Expected one of "MA" or "Multi-4" without the quotes.',
                             'We received : ', args.mode,
                             'Common mistakes include spelling mistakes, check it to make sure.')
    else:
        raise ValueError("Expected the modes to be set with either -train True or -test True.\n"+\
                         "Please try again!")
            